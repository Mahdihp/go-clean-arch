// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bxcodec/go-clean-arch/domain/ent/account"
	"github.com/bxcodec/go-clean-arch/domain/ent/predicate"
	"github.com/bxcodec/go-clean-arch/domain/ent/wallet"
)

// WalletUpdate is the builder for updating Wallet entities.
type WalletUpdate struct {
	config
	hooks    []Hook
	mutation *WalletMutation
}

// Where appends a list predicates to the WalletUpdate builder.
func (wu *WalletUpdate) Where(ps ...predicate.Wallet) *WalletUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetName sets the "name" field.
func (wu *WalletUpdate) SetName(s string) *WalletUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableName(s *string) *WalletUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// SetIsActive sets the "is_active" field.
func (wu *WalletUpdate) SetIsActive(b bool) *WalletUpdate {
	wu.mutation.SetIsActive(b)
	return wu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableIsActive(b *bool) *WalletUpdate {
	if b != nil {
		wu.SetIsActive(*b)
	}
	return wu
}

// SetDeleted sets the "deleted" field.
func (wu *WalletUpdate) SetDeleted(b bool) *WalletUpdate {
	wu.mutation.SetDeleted(b)
	return wu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableDeleted(b *bool) *WalletUpdate {
	if b != nil {
		wu.SetDeleted(*b)
	}
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WalletUpdate) SetUpdatedAt(t time.Time) *WalletUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableUpdatedAt(t *time.Time) *WalletUpdate {
	if t != nil {
		wu.SetUpdatedAt(*t)
	}
	return wu
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (wu *WalletUpdate) SetAccountID(id int64) *WalletUpdate {
	wu.mutation.SetAccountID(id)
	return wu
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (wu *WalletUpdate) SetNillableAccountID(id *int64) *WalletUpdate {
	if id != nil {
		wu = wu.SetAccountID(*id)
	}
	return wu
}

// SetAccount sets the "account" edge to the Account entity.
func (wu *WalletUpdate) SetAccount(a *Account) *WalletUpdate {
	return wu.SetAccountID(a.ID)
}

// Mutation returns the WalletMutation object of the builder.
func (wu *WalletUpdate) Mutation() *WalletMutation {
	return wu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (wu *WalletUpdate) ClearAccount() *WalletUpdate {
	wu.mutation.ClearAccount()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WalletUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WalletUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WalletUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WalletUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WalletUpdate) check() error {
	if v, ok := wu.mutation.Name(); ok {
		if err := wallet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Wallet.name": %w`, err)}
		}
	}
	return nil
}

func (wu *WalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt8))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(wallet.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.IsActive(); ok {
		_spec.SetField(wallet.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := wu.mutation.Deleted(); ok {
		_spec.SetField(wallet.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if wu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.AccountTable,
			Columns: []string{wallet.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.AccountTable,
			Columns: []string{wallet.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WalletUpdateOne is the builder for updating a single Wallet entity.
type WalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WalletMutation
}

// SetName sets the "name" field.
func (wuo *WalletUpdateOne) SetName(s string) *WalletUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableName(s *string) *WalletUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// SetIsActive sets the "is_active" field.
func (wuo *WalletUpdateOne) SetIsActive(b bool) *WalletUpdateOne {
	wuo.mutation.SetIsActive(b)
	return wuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableIsActive(b *bool) *WalletUpdateOne {
	if b != nil {
		wuo.SetIsActive(*b)
	}
	return wuo
}

// SetDeleted sets the "deleted" field.
func (wuo *WalletUpdateOne) SetDeleted(b bool) *WalletUpdateOne {
	wuo.mutation.SetDeleted(b)
	return wuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableDeleted(b *bool) *WalletUpdateOne {
	if b != nil {
		wuo.SetDeleted(*b)
	}
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WalletUpdateOne) SetUpdatedAt(t time.Time) *WalletUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableUpdatedAt(t *time.Time) *WalletUpdateOne {
	if t != nil {
		wuo.SetUpdatedAt(*t)
	}
	return wuo
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (wuo *WalletUpdateOne) SetAccountID(id int64) *WalletUpdateOne {
	wuo.mutation.SetAccountID(id)
	return wuo
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableAccountID(id *int64) *WalletUpdateOne {
	if id != nil {
		wuo = wuo.SetAccountID(*id)
	}
	return wuo
}

// SetAccount sets the "account" edge to the Account entity.
func (wuo *WalletUpdateOne) SetAccount(a *Account) *WalletUpdateOne {
	return wuo.SetAccountID(a.ID)
}

// Mutation returns the WalletMutation object of the builder.
func (wuo *WalletUpdateOne) Mutation() *WalletMutation {
	return wuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (wuo *WalletUpdateOne) ClearAccount() *WalletUpdateOne {
	wuo.mutation.ClearAccount()
	return wuo
}

// Where appends a list predicates to the WalletUpdate builder.
func (wuo *WalletUpdateOne) Where(ps ...predicate.Wallet) *WalletUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WalletUpdateOne) Select(field string, fields ...string) *WalletUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Wallet entity.
func (wuo *WalletUpdateOne) Save(ctx context.Context) (*Wallet, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WalletUpdateOne) SaveX(ctx context.Context) *Wallet {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WalletUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WalletUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WalletUpdateOne) check() error {
	if v, ok := wuo.mutation.Name(); ok {
		if err := wallet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Wallet.name": %w`, err)}
		}
	}
	return nil
}

func (wuo *WalletUpdateOne) sqlSave(ctx context.Context) (_node *Wallet, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt8))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Wallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wallet.FieldID)
		for _, f := range fields {
			if !wallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(wallet.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.IsActive(); ok {
		_spec.SetField(wallet.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := wuo.mutation.Deleted(); ok {
		_spec.SetField(wallet.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if wuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.AccountTable,
			Columns: []string{wallet.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.AccountTable,
			Columns: []string{wallet.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Wallet{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
