syntax = "proto3";
package market;

option go_package = "adapter/grpc-proto/market";
import "google/protobuf/any.proto";

message GetKlineRequest{
  string  category = 1;
  string  symbol = 2;
  string  interval = 3;
  int64  start = 4;
  int64  end = 5;
  int32  limit = 6;
}
message GetKlineResponse{
  int32 retCode = 1;
  string retMsg = 2;
  uint64  time = 4;
  Result result = 5;
  RetExtInfo retExtInfo = 6;

  message Result {
    string symbol = 1;
    string category = 2;
    google.protobuf.Any list = 3;
  }
  message RetExtInfo {
  }
}
message GetInstrumentsInfoRequest{
  string  category = 1;
  repeated string  symbol = 2;
  string  status = 3;
  string  baseCoin = 4;
  int32  limit = 5;
  string  cursor = 6;
}
message LeverageFilter {
  string minLeverage = 1;
  string maxLeverage = 2;
  string leverageStep = 3;
}

message PriceFilter {
  string minPrice = 1;
  string maxPrice = 2;
  string tickSize = 3;
}

message LotSizeFilter {
  string maxOrderQty = 1;
  string maxMktOrderQty = 2;
  string minOrderQty = 3;
  string qtyStep = 4;
  string postOnlyMaxOrderQty = 5;
  string minNotionalValue = 6;
  string basePrecision = 7;
  string quotePrecision = 8;
  string minOrderAmt = 9;
  string maxOrderAmt = 10;


}

message Phases {
  string phase = 1;
  string startTime = 2;
  string endTime = 3;
}

message AuctionFeeInfo {
  string auctionFeeRate = 1;
  string takerFeeRate = 2;
  string makerFeeRate = 3;
}

message RiskParameters {
  string limitParameter = 1;
  string marketParameter = 2;
}

message PreListingInfo {
  string curAuctionPhase = 1;
  repeated Phases phases = 2;
  AuctionFeeInfo auctionFeeInfo = 3;
}
message GetInstrumentsInfoLinearResponse{
  uint32 retCode = 1;
  string retMsg = 2;
  Result result = 3;
  RetExtInfo retExtInfo = 4;
  uint64 time = 5;

  message List {
    string symbol = 1;
    string contractType = 2;
    string status = 3;
    string baseCoin = 4;
    string quoteCoin = 5;
    string launchTime = 6;
    string deliveryTime = 7;
    string deliveryFeeRate = 8;
    string priceScale = 9;
    LeverageFilter leverageFilter = 10;
    PriceFilter priceFilter = 11;
    LotSizeFilter lotSizeFilter = 12;
    bool unifiedMarginTrade = 13;
    uint32 fundingInterval = 14;
    string settleCoin = 15;
    string copyTrading = 16;
    string upperFundingRate = 17;
    string lowerFundingRate = 18;
    bool isPreListing = 19;
    PreListingInfo preListingInfo = 20;
  }

  message Result {
    string category = 1;
    repeated List list = 2;
    string nextPageCursor = 3;
  }

  message RetExtInfo {
  }
}

message GetInstrumentsInfoInverseResponse {
  uint32 retCode = 1;
  string retMsg = 2;
  Result result = 3;
  RetExtInfo retExtInfo = 4;
  uint64 time = 5;


  message List {
    string symbol = 1;
    string contractType = 2;
    string status = 3;
    string baseCoin = 4;
    string quoteCoin = 5;
    string launchTime = 6;
    string deliveryTime = 7;
    string deliveryFeeRate = 8;
    string priceScale = 9;
    bool unifiedMarginTrade = 10;
    uint32 fundingInterval = 11;
    string copyTrading = 12;
    string upperFundingRate = 13;
    string lowerFundingRate = 14;
    bool isPreListing = 15;
    string settleCoin = 16;
    string optionsType = 17;
    LeverageFilter leverageFilter = 18;
    PriceFilter priceFilter = 19;
    LotSizeFilter lotSizeFilter = 20;
    PreListingInfo preListingInfo = 21;


  }

  message Result {
    string category = 1;
    string nextPageCursor = 2;
    repeated List list = 3;
  }
  message RetExtInfo {
  }
}

message GetInstrumentsInfoSpotResponse {
  uint32 retCode = 1;
  string retMsg = 2;
  Result result = 3;
  RetExtInfo retExtInfo = 4;
  uint64 time = 5;

  message List {
    string symbol = 1;
    string baseCoin = 2;
    string quoteCoin = 3;
    string innovation = 4;
    string status = 5;
    string marginTrading = 6;
    string stTag = 7;
    LotSizeFilter lotSizeFilter = 8;
    PriceFilter priceFilter = 9;
    RiskParameters riskParameters = 10;
  }

  message Result {
    string category = 1;
    repeated List list = 2;
  }

  message RetExtInfo {
  }
}
message Test{
  string name = 1;
}

message GetTickersRequest{
  string  category = 1;
  string  symbol = 2;
  string  baseCoin = 3;
  string  expDate = 4;
}

message GetTickersSpotResponse{
  uint32 retCode = 1;
  string retMsg = 2;
  Result result = 3;
  RetExtInfo retExtInfo = 4;
  uint64 time = 5;

  message List {
    string symbol = 1;
    string bid1Price = 2;
    string bid1Size = 3;
    string ask1Price = 4;
    string ask1Size = 5;
    string lastPrice = 6;
    string prevPrice24h = 7;
    string price24hPcnt = 8;
    string highPrice24h = 9;
    string lowPrice24h = 10;
    string turnover24h = 11;
    string volume24h = 12;
    string usdIndexPrice = 13;
  }

  message Result {
    string category = 1;
    repeated List list = 2;
  }

  message RetExtInfo {
  }
}
message GetTickersLinearResponse{
  uint32 retCode = 1;
  string retMsg = 2;
  Result result = 3;
  RetExtInfo retExtInfo = 4;
  uint64 time = 5;

  message List {
    string symbol = 1;
    string lastPrice = 2;
    string indexPrice = 3;
    string markPrice = 4;
    string prevPrice24h = 5;
    string price24hPcnt = 6;
    string highPrice24h = 7;
    string lowPrice24h = 8;
    string prevPrice1h = 9;
    string openInterest = 10;
    string openInterestValue = 11;
    string turnover24h = 12;
    string volume24h = 13;
    string fundingRate = 14;
    string nextFundingTime = 15;
    string predictedDeliveryPrice = 16;
    string basisRate = 17;
    string deliveryFeeRate = 18;
    string deliveryTime = 19;
    string ask1Size = 20;
    string bid1Price = 21;
    string ask1Price = 22;
    string bid1Size = 23;
    string basis = 24;
    string preOpenPrice = 25;
    string preQty = 26;
    string curPreListingPhase = 27;
  }

  message Result {
    string category = 1;
    repeated List list = 2;
  }

  message RetExtInfo {
  }
}
message GetTickersInverseResponse{
  uint32 retCode = 1;
  string retMsg = 2;
  Result result = 3;
  RetExtInfo retExtInfo = 4;
  uint64 time = 5;

  message List {
    string symbol = 1;
    string lastPrice = 2;
    string indexPrice = 3;
    string markPrice = 4;
    string prevPrice24h = 5;
    string price24hPcnt = 6;
    string highPrice24h = 7;
    string lowPrice24h = 8;
    string prevPrice1h = 9;
    string openInterest = 10;
    string openInterestValue = 11;
    string turnover24h = 12;
    string volume24h = 13;
    string fundingRate = 14;
    string nextFundingTime = 15;
    string predictedDeliveryPrice = 16;
    string basisRate = 17;
    string deliveryFeeRate = 18;
    string deliveryTime = 19;
    string ask1Size = 20;
    string bid1Price = 21;
    string ask1Price = 22;
    string bid1Size = 23;
    string basis = 24;
    string preOpenPrice = 25;
    string preQty = 26;
    string curPreListingPhase = 27;
  }

  message Result {
    string category = 1;
    repeated List list = 2;
  }

  message RetExtInfo {
  }
}
message GetRiskLimitRequest{
  string  category = 1;
  repeated string  symbol = 2;
//  int32  pageIndex = 3;
//  int32  pageSize = 4;
}

message GetRiskLimitResponse {
  uint32 retCode = 1;
  string retMsg = 2;
  repeated RiskLimitSymbol  result = 5;
  Retextinfo retExtInfo = 3;
  uint64 time = 4;

  message RiskLimitSymbol{
    string  symbol = 1;
    string  category = 2;
    repeated RiskLimit  list = 3;
  }

  message RiskLimit {
    uint32 id = 1;
    string riskLimitValue = 3;
    string maintenanceMargin = 4;
    string initialMargin = 5;
    uint32 isLowestRisk = 6;
    string maxLeverage = 7;
    string mmDeduction = 8;
  }


  message Retextinfo {
  }


}
service MarketService {
  rpc GetKline(GetKlineRequest) returns (GetKlineResponse) {}

  rpc GetInstrumentsInfoLinear(GetInstrumentsInfoRequest) returns (GetInstrumentsInfoLinearResponse) {}
  rpc GetInstrumentsInfoInverse(GetInstrumentsInfoRequest) returns (GetInstrumentsInfoInverseResponse) {}
  rpc GetInstrumentsInfoSpot(GetInstrumentsInfoRequest) returns (GetInstrumentsInfoSpotResponse) {}

  rpc GetTickersSpot(GetTickersRequest) returns (GetTickersSpotResponse) {}
  rpc GetTickersLinear(GetTickersRequest) returns (GetTickersLinearResponse) {}
  rpc GetTickersInverse(GetTickersRequest) returns (GetTickersInverseResponse) {}

  rpc GetRiskLimitLinear(GetRiskLimitRequest) returns (GetRiskLimitResponse){}
  rpc GetRiskLimitInverse(GetRiskLimitRequest) returns (GetRiskLimitResponse){}
}
